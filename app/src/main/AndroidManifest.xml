<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.example.myapplication.ouwenbin">
    <!-- 申请权限的清单开始 -->
    <uses-permission android:name="android.permission.INTERNET" /> <!-- 获取访问网络当前状态的权限 -->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /> <!-- 读写文件 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.WRITE_CONTACTS" />

    <application
        android:allowBackup="true"
        android:icon="@drawable/ic_launcher_icon"
        android:label="@string/app_name"
        android:roundIcon="@drawable/ic_launcher_icon"
        android:supportsRtl="true"
        android:theme="@style/AppTheme"
        android:networkSecurityConfig="@xml/network_security_config"
        tools:ignore="GoogleAppIndexingWarning">

        <activity android:name=".controller.activity.LaunchActivity" android:screenOrientation="portrait">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity
            android:name=".controller.activity.MainActivity"
            android:label="@string/app_name"
            android:launchMode="singleTask"
            android:screenOrientation="portrait"
            android:theme="@style/AppTheme.NoActionBar" />
        <!--
     设置Activity的启动模式：android:launchMode="singleTask"

     1.Standard 模式：又称为标准模式，也是系统的默认模式（可以不指定），
     在这样模式下，每启动一个Activity都会重新创建一个Activity的新实例，并且将其加入任务栈中，而且完全不会去考虑这个实例是否已存在。
     2.singleTop 模式：（再比如新闻客户端收到了100个推送）又称栈顶复用模式，顾名思义，在这种模式下，
     如果有新的Activity已经存在任务栈的栈顶，那么此Activity就不会被重新创建新实例，而是复用已存在任务栈栈顶的Activity。
     这里重点是位于栈顶，才会被复用，如果新的Activity的实例已存在但没有位于栈顶，那么新的Activity仍然会被重建。
     3.singleTask 模式：（如新闻，侧滑，应用主界面等） 又称为栈内复用模式。这是一种单例模式，与singTop点类似，
     只不过singTop是检测栈顶元素是否有需要启动的Activity，而singTask则是检测整个栈中是否存在当前需要启动的Activity，
     如果存在就直接将该Activity置于栈顶，并将该Activity以上的Activity都从任务栈中移出销毁，同时也会回调onNewIntent方法。
     4.singleInstance 模式：在singleInstance模式下，该Activity在整个android系统内存中有且只有一个实例，而且该实例单独尊享一个Task。
     换句话说，A应用需要启动的MainActivity 是singleInstance模式，
     当A启动后，系统会为它创建一个新的任务栈，然后A单独在这个新的任务栈中，如果此时B应用也要激活MainActivity，
     由于栈内复用的特性，则不会重新创建，而是两个应用共享一个Activity的实例。
        -->
        <activity
            android:name=".controller.activity.ijkVideoPlayer"
            android:configChanges="keyboardHidden|screenSize|orientation"
            android:theme="@android:style/Theme.Black.NoTitleBar.Fullscreen"
            android:screenOrientation="landscape" />
        <activity android:name=".controller.activity.PersonalCenterActivity" />
        <activity android:name=".controller.activity.LoginActivity" />
        <activity android:name=".controller.activity.RegActivity" />
    </application>



</manifest>